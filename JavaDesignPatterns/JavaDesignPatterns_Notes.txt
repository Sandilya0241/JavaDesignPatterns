%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Design Patterns   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.

You canâ€™t just find a pattern and copy it into your program, the way you can with off-the-shelf functions or libraries. The pattern is not a specific piece of code, but a general concept for solving a particular problem. You can follow the pattern details and implement a solution that suits the realities of your own program.

Patterns are often confused with algorithms, because both concepts describe typical solutions to some known problems. While an algorithm always defines a clear set of actions that can achieve some goal, a pattern is a more high-level description of a solution. The code of the same pattern applied to two different programs may be different.

An analogy to an algorithm is a cooking recipe: both have clear steps to achieve a goal. On the other hand, a pattern is more like a blueprint: you can see what the result and its features are, but the exact order of implementation is up to you.

1) Creational patterns
provide object creation mechanisms that increase flexibility and reuse of existing code.

2) Structural patterns
explain how to assemble objects and classes into larger structures, while keeping these structures flexible and efficient.

3) Behavioral patterns
take care of effective communication and the assignment of responsibilities between objects.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Creational patterns   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Singleton Pattern
Factory Pattern
Abstract Factory Pattern
Builder Pattern
Prototype Pattern

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Singleton Pattern   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Intent:
----------
Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.

Problem:
----------
The Singleton pattern solves two problems at the same time, violating the Single Responsibility Principle:
	I) Ensure that a class has just a single instance:
	---------------------------------------------------	
		Why would we need to control how many instances a class has? The most common reason for this is to control access to some shared resource - for example, a database or a file. Here is how it works: imagine that you created an object, but after a while decided to create a new one. Instead of receiving a fresh object, you will get the one you already created.
		Note: this behavior is impossible to implement with a regular constructor since a constructor call must always return a new object by design.
	II) Provide a global access point to that instance:
	---------------------------------------------------
		Remember those global variables that you used to store some essential objects? While they are very handy, they are also unsafe since any code can potentially overwrite the contents of those variables and crash the app. 
		
		Just like a global variable, the Singleton pattern lets you access some object from anywhere in the program. However it also protects that instance from being overwritten by other code.
		
Solution:
----------
All implementations of the Singleton have these teo steps in common:
	a) Make the default constructor private, to prevent other objects from using the 'new' operator with the Singleton class.
	b) Create a static creation method that acts as a constructor. Under the hood, this method calls the private constructor to create an object and saves it in a static field. All following calls to this method returns the cached object.

If our code has access to the Singleton class, then it's able to call the Singleton's static method. So, whenever that method is called, the same object is always returned.

Structure:
----------

						+-----------------------------+
						|       Singleton             |<-----+
						|-----------------------------|      |
						| - instance: Singleton       |------+
	                    |-----------------------------|
        +---------+     | - Singleton()               |
		|  Client |---->| + getInstance(): Singleton  |
        +---------+     +-----------------------------+

	if(instance == null) {
		instance = new Singleton();
	}
	return instance;


Pseudocode:
----------
/*The Database connection class acts as a Singleton. This class doesn't have a public constructor, so the only way to get its object is to call the getInstance() method. This method caches the first created object and returns it in all subsequent calls.*/

class Database is
	/*The field for storing the singleton instance should be declared static.*/
	private static field instance: Database
	
	/*The singleton's constructor should always be private to prevent direct construction calls with the 'new' operator.*/
	private constructor Database() is
		/*Some initialization code, such as the actual connection to a database server*/
	
	/*The static method that controls access to the singleton instance.*/
	public static method getInstance() is
		if(Database.instance == null) then
			acquireThreadLock() and then
				/*Ensure that the instance hasn't yet been initialized by another thread while this one has been waiting for the lock's release*/
				if(Database.instance == null) then
					Database.instance = new Database()
		return Database.instance
		
	/*Finally, any singleton should define some business logic which can be executed on its instance.*/
	public method query(sql) is
		/*For instance, all database queries of an app go through this method. Therefore, you can place throttling or caching logic here.*/
		//...
	
	class Application is
		method main() is
			Database foo = Database.getInstance()
			foo.query("SELECT ...")
			
			Database bar = Database.getInstance()
			bar.query("SELECT ...")
			
			/*The variable 'bar' will contain the same object as the variable 'foo'*/
			

Applicability:
-------------
>> We should use Singleton pattern when a class in your program should have just a single instance available to all clients; For example, a single database object shared by different parts of the program.
	== The Singleton pattern disables all other means of creating objects of a class except for special creation method. This method either creates a new object or returns an existing one if it has already been created.

>> Use the Singleton pattern when we need stricter control over global variables.
	== Unlike global variables, the Singleton pattern guarantees that there's just one instance of a class. Nothing, except for the Singleton class itself, can replace the cached instance.
	
	Note: You can always adjust this limitation and allow creating any number of Singleton instances. The only piece of code that needs changing is the body of the getInstance method.

How to implement:
----------------
* Add a private static field to the class for storing the Singleton instance.
* Declare a public static creation method for getting the Singleton instance.
* Implement "Lazy initialization" inside the static method. It should create a new object on its first call and put it into the static field. The method should always return that instance on all subsequent calls.
* Make the constructor of the class private. The static method of the class will still be able to call the constructor, but not the other objects.
* Go over the client code and change all direct calls to the Singleton's constructor with calls to its static creation method.

Pros and Cons:
--------------
Pros:
# You can be sure that a class has only a single instance.
# You gain a global access point to that instance.
# The Singleton object is initialized only when it's requested for the first time.

Cons:
#Violates the Single Responsibility Principle. The pattern solves two problems at a time.
#The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other.
#The pattern requirement in multithreaded environment so that multiple threads won't create a Singleton object several times.
#It may be difficult to unit test the client code of the Singleton because many test frameworks rely on inheritance when producing mock objects. Since the constructor of the Singleton class is private and overriding static methods is impossible in many languages, you will need to think of a creative way to mock the Singleton. Or just don't write the tests. Or don't use the Singleton pattern.


Relations with Other patterns:
------------------------------
* A Facade class can often be transformed into a Singleton since a single facade object is sufficient in most cases.
* Flyweight would resemble Singleton if you somehow managed to reduce all shared states of the objects to just one Flyweight object. But there are two fundamental differences between these patterns:
	== There should be only one Singleton instance, whereas a Flyweight class can have multiple instances with different intrinsic states.
	== The Singleton object can be mutable. Flyweight objects are immutable.
* Abstract Factories, Builder and Prototypes can all be implemented as Singleton.



